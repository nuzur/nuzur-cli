// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	gen "github.com/nuzur/nem/idl/gen"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NuzurProduct_GetUser_FullMethodName                                     = "/NuzurProduct/GetUser"
	NuzurProduct_GetTokenUser_FullMethodName                                = "/NuzurProduct/GetTokenUser"
	NuzurProduct_GetUserByEmail_FullMethodName                              = "/NuzurProduct/GetUserByEmail"
	NuzurProduct_GetTokenUserRoleForProject_FullMethodName                  = "/NuzurProduct/GetTokenUserRoleForProject"
	NuzurProduct_GetTokenUserRoleForTeam_FullMethodName                     = "/NuzurProduct/GetTokenUserRoleForTeam"
	NuzurProduct_ListUsersForTeam_FullMethodName                            = "/NuzurProduct/ListUsersForTeam"
	NuzurProduct_ListUsersForProject_FullMethodName                         = "/NuzurProduct/ListUsersForProject"
	NuzurProduct_AddUserToProject_FullMethodName                            = "/NuzurProduct/AddUserToProject"
	NuzurProduct_UpdateUserProject_FullMethodName                           = "/NuzurProduct/UpdateUserProject"
	NuzurProduct_RemoveUserFromProject_FullMethodName                       = "/NuzurProduct/RemoveUserFromProject"
	NuzurProduct_AddUserToTeam_FullMethodName                               = "/NuzurProduct/AddUserToTeam"
	NuzurProduct_UpdateUserTeam_FullMethodName                              = "/NuzurProduct/UpdateUserTeam"
	NuzurProduct_RemoveUserFromTeam_FullMethodName                          = "/NuzurProduct/RemoveUserFromTeam"
	NuzurProduct_ListTeamsForUser_FullMethodName                            = "/NuzurProduct/ListTeamsForUser"
	NuzurProduct_ListTeamsForAdminUser_FullMethodName                       = "/NuzurProduct/ListTeamsForAdminUser"
	NuzurProduct_GetTeamForUser_FullMethodName                              = "/NuzurProduct/GetTeamForUser"
	NuzurProduct_CreateTeam_FullMethodName                                  = "/NuzurProduct/CreateTeam"
	NuzurProduct_UpdateTeam_FullMethodName                                  = "/NuzurProduct/UpdateTeam"
	NuzurProduct_GetConnectionWithSecret_FullMethodName                     = "/NuzurProduct/GetConnectionWithSecret"
	NuzurProduct_CreateConnectionSecret_FullMethodName                      = "/NuzurProduct/CreateConnectionSecret"
	NuzurProduct_UpdateConnectionSecret_FullMethodName                      = "/NuzurProduct/UpdateConnectionSecret"
	NuzurProduct_DeleteConnectionSecret_FullMethodName                      = "/NuzurProduct/DeleteConnectionSecret"
	NuzurProduct_ListProjectsForUser_FullMethodName                         = "/NuzurProduct/ListProjectsForUser"
	NuzurProduct_GetProjectForUser_FullMethodName                           = "/NuzurProduct/GetProjectForUser"
	NuzurProduct_CreateProject_FullMethodName                               = "/NuzurProduct/CreateProject"
	NuzurProduct_UpdateProject_FullMethodName                               = "/NuzurProduct/UpdateProject"
	NuzurProduct_ListProjectVersions_FullMethodName                         = "/NuzurProduct/ListProjectVersions"
	NuzurProduct_ListProjectVersionsForUser_FullMethodName                  = "/NuzurProduct/ListProjectVersionsForUser"
	NuzurProduct_GetProjectVersionForUser_FullMethodName                    = "/NuzurProduct/GetProjectVersionForUser"
	NuzurProduct_GetLatestProjectVersion_FullMethodName                     = "/NuzurProduct/GetLatestProjectVersion"
	NuzurProduct_GetLatestProjectVersionForUser_FullMethodName              = "/NuzurProduct/GetLatestProjectVersionForUser"
	NuzurProduct_GetLatestProjectVersionUUIDForUser_FullMethodName          = "/NuzurProduct/GetLatestProjectVersionUUIDForUser"
	NuzurProduct_GetProjectVersionVersion_FullMethodName                    = "/NuzurProduct/GetProjectVersionVersion"
	NuzurProduct_GetProjectVersionIdentifier_FullMethodName                 = "/NuzurProduct/GetProjectVersionIdentifier"
	NuzurProduct_CreateProjectVersion_FullMethodName                        = "/NuzurProduct/CreateProjectVersion"
	NuzurProduct_CreateDraftProjectVersionForExistingProject_FullMethodName = "/NuzurProduct/CreateDraftProjectVersionForExistingProject"
	NuzurProduct_UpdateProjectVersion_FullMethodName                        = "/NuzurProduct/UpdateProjectVersion"
	NuzurProduct_DiscardDraftProjectVersion_FullMethodName                  = "/NuzurProduct/DiscardDraftProjectVersion"
	NuzurProduct_SendProjectVersionForReview_FullMethodName                 = "/NuzurProduct/SendProjectVersionForReview"
	NuzurProduct_WithdrawFromReviewProjectVersion_FullMethodName            = "/NuzurProduct/WithdrawFromReviewProjectVersion"
	NuzurProduct_ReviewProjectVersion_FullMethodName                        = "/NuzurProduct/ReviewProjectVersion"
	NuzurProduct_UploadProjectVersionSnapshot_FullMethodName                = "/NuzurProduct/UploadProjectVersionSnapshot"
	NuzurProduct_GetSignedFileURL_FullMethodName                            = "/NuzurProduct/GetSignedFileURL"
	NuzurProduct_UploadExtensionExecutionFile_FullMethodName                = "/NuzurProduct/UploadExtensionExecutionFile"
	NuzurProduct_GetExtensionExecutionFile_FullMethodName                   = "/NuzurProduct/GetExtensionExecutionFile"
	NuzurProduct_UploadExtensionIcon_FullMethodName                         = "/NuzurProduct/UploadExtensionIcon"
	NuzurProduct_UploadRecordFieldFile_FullMethodName                       = "/NuzurProduct/UploadRecordFieldFile"
	NuzurProduct_GetRecordFieldSignedFileURL_FullMethodName                 = "/NuzurProduct/GetRecordFieldSignedFileURL"
	NuzurProduct_GetRecordFileContent_FullMethodName                        = "/NuzurProduct/GetRecordFileContent"
	NuzurProduct_ListExtensions_FullMethodName                              = "/NuzurProduct/ListExtensions"
	NuzurProduct_GetExtension_FullMethodName                                = "/NuzurProduct/GetExtension"
	NuzurProduct_CreateExtension_FullMethodName                             = "/NuzurProduct/CreateExtension"
	NuzurProduct_UpdateExtension_FullMethodName                             = "/NuzurProduct/UpdateExtension"
	NuzurProduct_ListExtensionVersions_FullMethodName                       = "/NuzurProduct/ListExtensionVersions"
	NuzurProduct_GetExtensionVersion_FullMethodName                         = "/NuzurProduct/GetExtensionVersion"
	NuzurProduct_CreateExtensionVersion_FullMethodName                      = "/NuzurProduct/CreateExtensionVersion"
	NuzurProduct_UpdateExtensionVersion_FullMethodName                      = "/NuzurProduct/UpdateExtensionVersion"
	NuzurProduct_ListExtensionExecutions_FullMethodName                     = "/NuzurProduct/ListExtensionExecutions"
	NuzurProduct_GetExtensionExecution_FullMethodName                       = "/NuzurProduct/GetExtensionExecution"
	NuzurProduct_CreateExtensionExecution_FullMethodName                    = "/NuzurProduct/CreateExtensionExecution"
	NuzurProduct_UpdateExtensionExecution_FullMethodName                    = "/NuzurProduct/UpdateExtensionExecution"
	NuzurProduct_ListUserChangeRequests_FullMethodName                      = "/NuzurProduct/ListUserChangeRequests"
	NuzurProduct_GetChangeRequest_FullMethodName                            = "/NuzurProduct/GetChangeRequest"
	NuzurProduct_CreateChangeRequest_FullMethodName                         = "/NuzurProduct/CreateChangeRequest"
	NuzurProduct_UpdateChangeRequest_FullMethodName                         = "/NuzurProduct/UpdateChangeRequest"
	NuzurProduct_ListChangeRequestsForReview_FullMethodName                 = "/NuzurProduct/ListChangeRequestsForReview"
	NuzurProduct_GetUserProjectVersionData_FullMethodName                   = "/NuzurProduct/GetUserProjectVersionData"
	NuzurProduct_SaveUserProjectVersionData_FullMethodName                  = "/NuzurProduct/SaveUserProjectVersionData"
	NuzurProduct_GetObjectStoreWithSecret_FullMethodName                    = "/NuzurProduct/GetObjectStoreWithSecret"
	NuzurProduct_CreateObjectStoreSecret_FullMethodName                     = "/NuzurProduct/CreateObjectStoreSecret"
	NuzurProduct_UpdateObjectStoreSecret_FullMethodName                     = "/NuzurProduct/UpdateObjectStoreSecret"
	NuzurProduct_DeleteObjectStoreSecret_FullMethodName                     = "/NuzurProduct/DeleteObjectStoreSecret"
	NuzurProduct_GenerateSQLForCR_FullMethodName                            = "/NuzurProduct/GenerateSQLForCR"
	NuzurProduct_ReviewDataChange_FullMethodName                            = "/NuzurProduct/ReviewDataChange"
	NuzurProduct_GetMembership_FullMethodName                               = "/NuzurProduct/GetMembership"
	NuzurProduct_CreateMembership_FullMethodName                            = "/NuzurProduct/CreateMembership"
	NuzurProduct_UpdateMembership_FullMethodName                            = "/NuzurProduct/UpdateMembership"
	NuzurProduct_MembershipForProject_FullMethodName                        = "/NuzurProduct/MembershipForProject"
	NuzurProduct_MembershipForTeam_FullMethodName                           = "/NuzurProduct/MembershipForTeam"
)

// NuzurProductClient is the client API for NuzurProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NuzurProductClient interface {
	// user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*gen.User, error)
	GetTokenUser(ctx context.Context, in *GetTokenUserRequest, opts ...grpc.CallOption) (*gen.User, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*gen.User, error)
	GetTokenUserRoleForProject(ctx context.Context, in *GetUserRoleForProjectRequest, opts ...grpc.CallOption) (*GetUserRoleForProjectResponse, error)
	GetTokenUserRoleForTeam(ctx context.Context, in *GetUserRoleForTeamRequest, opts ...grpc.CallOption) (*GetUserRoleForTeamResponse, error)
	// user relations
	ListUsersForTeam(ctx context.Context, in *ListUsersForTeamRequest, opts ...grpc.CallOption) (*ListUsersForTeamResponse, error)
	ListUsersForProject(ctx context.Context, in *ListUsersForProjectRequest, opts ...grpc.CallOption) (*ListUsersForProjectResponse, error)
	AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*gen.UserProject, error)
	UpdateUserProject(ctx context.Context, in *UpdateUserProjectRequest, opts ...grpc.CallOption) (*gen.UserProject, error)
	RemoveUserFromProject(ctx context.Context, in *RemoveUserFromProjectRequest, opts ...grpc.CallOption) (*gen.UserProject, error)
	AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*gen.UserTeam, error)
	UpdateUserTeam(ctx context.Context, in *UpdateUserTeamRequest, opts ...grpc.CallOption) (*gen.UserTeam, error)
	RemoveUserFromTeam(ctx context.Context, in *RemoveUserFromTeamRequest, opts ...grpc.CallOption) (*gen.UserTeam, error)
	// team
	ListTeamsForUser(ctx context.Context, in *ListTeamsForUserRequest, opts ...grpc.CallOption) (*ListTeamsForUserResponse, error)
	ListTeamsForAdminUser(ctx context.Context, in *ListTeamsForAdminUserRequest, opts ...grpc.CallOption) (*ListTeamsForAdminUserResponse, error)
	GetTeamForUser(ctx context.Context, in *GetTeamForUserRequest, opts ...grpc.CallOption) (*gen.Team, error)
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*gen.Team, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*gen.Team, error)
	// connection
	GetConnectionWithSecret(ctx context.Context, in *GetConnectionWithSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error)
	CreateConnectionSecret(ctx context.Context, in *CreateConnectionSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error)
	UpdateConnectionSecret(ctx context.Context, in *UpdateConnectionSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error)
	DeleteConnectionSecret(ctx context.Context, in *DeleteConnectionSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error)
	// project
	ListProjectsForUser(ctx context.Context, in *ListProjectsForUserRequest, opts ...grpc.CallOption) (*ListProjectsForUserResponse, error)
	GetProjectForUser(ctx context.Context, in *GetProjectForUserRequest, opts ...grpc.CallOption) (*gen.Project, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*gen.Project, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*gen.Project, error)
	// project version
	ListProjectVersions(ctx context.Context, in *ListProjectVersionsRequest, opts ...grpc.CallOption) (*ListProjectVersionsResponse, error)
	ListProjectVersionsForUser(ctx context.Context, in *ListProjectVersionsForUserRequest, opts ...grpc.CallOption) (*ListProjectVersionsForUserResponse, error)
	GetProjectVersionForUser(ctx context.Context, in *GetProjectVersionForUserRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	GetLatestProjectVersion(ctx context.Context, in *GetLatestProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	GetLatestProjectVersionForUser(ctx context.Context, in *GetLatestProjectVersionForUserRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	GetLatestProjectVersionUUIDForUser(ctx context.Context, in *GetLatestProjectVersionUUIDForUserRequest, opts ...grpc.CallOption) (*GetLatestProjectVersionUUIDForUserResponse, error)
	GetProjectVersionVersion(ctx context.Context, in *GetProjectVersionVersionRequest, opts ...grpc.CallOption) (*GetProjectVersionVersionResponse, error)
	GetProjectVersionIdentifier(ctx context.Context, in *GetProjectVersionIdentifierRequest, opts ...grpc.CallOption) (*GetProjectVersionIdentifierResponse, error)
	CreateProjectVersion(ctx context.Context, in *CreateProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	CreateDraftProjectVersionForExistingProject(ctx context.Context, in *CreateDraftProjectVersionForExistingProjectRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	UpdateProjectVersion(ctx context.Context, in *UpdateProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	DiscardDraftProjectVersion(ctx context.Context, in *DiscardDraftProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	SendProjectVersionForReview(ctx context.Context, in *SendProjectVersionForReviewRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	WithdrawFromReviewProjectVersion(ctx context.Context, in *WithdrawFromReviewProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	ReviewProjectVersion(ctx context.Context, in *ReviewProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error)
	// files
	UploadProjectVersionSnapshot(ctx context.Context, in *UploadProjectVersionSnapshotRequest, opts ...grpc.CallOption) (*UploadProjectVersionSnapshotResponse, error)
	GetSignedFileURL(ctx context.Context, in *GetSignedFileURLRequest, opts ...grpc.CallOption) (*GetSignedFileURLResponse, error)
	UploadExtensionExecutionFile(ctx context.Context, in *UploadExtensionExecutionFileRequest, opts ...grpc.CallOption) (*UploadExtensionExecutionFileResponse, error)
	GetExtensionExecutionFile(ctx context.Context, in *GetExtensionExecutionFileRequest, opts ...grpc.CallOption) (*GetExtensionExecutionFileResponse, error)
	UploadExtensionIcon(ctx context.Context, in *UploadExtensionIconRequest, opts ...grpc.CallOption) (*UploadExtensionIconResponse, error)
	// data manager - records
	UploadRecordFieldFile(ctx context.Context, in *UploadRecordFieldFileRequest, opts ...grpc.CallOption) (*UploadRecordFieldFileResponse, error)
	GetRecordFieldSignedFileURL(ctx context.Context, in *GetRecordFieldSignedFileURLRequest, opts ...grpc.CallOption) (*GetRecordFieldSignedFileURLResponse, error)
	GetRecordFileContent(ctx context.Context, in *GetRecordFileContentRequest, opts ...grpc.CallOption) (*GetRecordFileContentResponse, error)
	// extensions
	ListExtensions(ctx context.Context, in *ListExtensionsRequest, opts ...grpc.CallOption) (*ListExtensionsResponse, error)
	GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*gen.Extension, error)
	CreateExtension(ctx context.Context, in *CreateExtensionRequest, opts ...grpc.CallOption) (*gen.Extension, error)
	UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*gen.Extension, error)
	// extension version
	ListExtensionVersions(ctx context.Context, in *ListExtensionVersionsRequest, opts ...grpc.CallOption) (*ListExtensionVersionsResponse, error)
	GetExtensionVersion(ctx context.Context, in *GetExtensionVersionRequest, opts ...grpc.CallOption) (*gen.ExtensionVersion, error)
	CreateExtensionVersion(ctx context.Context, in *CreateExtensionVersionRequest, opts ...grpc.CallOption) (*gen.ExtensionVersion, error)
	UpdateExtensionVersion(ctx context.Context, in *UpdateExtensionVersionRequest, opts ...grpc.CallOption) (*gen.ExtensionVersion, error)
	// extension exec
	ListExtensionExecutions(ctx context.Context, in *ListExtensionExecutionsRequest, opts ...grpc.CallOption) (*ListExtensionExecutionsResponse, error)
	GetExtensionExecution(ctx context.Context, in *GetExtensionExecutionRequest, opts ...grpc.CallOption) (*gen.ExtensionExecution, error)
	CreateExtensionExecution(ctx context.Context, in *CreateExtensionExecutionRequest, opts ...grpc.CallOption) (*gen.ExtensionExecution, error)
	UpdateExtensionExecution(ctx context.Context, in *UpdateExtensionExecutionRequest, opts ...grpc.CallOption) (*gen.ExtensionExecution, error)
	// change request
	ListUserChangeRequests(ctx context.Context, in *ListUserChangeRequestsRequest, opts ...grpc.CallOption) (*ListUserChangeRequestsResponse, error)
	GetChangeRequest(ctx context.Context, in *GetChangeRequestRequest, opts ...grpc.CallOption) (*gen.ChangeRequest, error)
	CreateChangeRequest(ctx context.Context, in *CreateChangeRequestRequest, opts ...grpc.CallOption) (*gen.ChangeRequest, error)
	UpdateChangeRequest(ctx context.Context, in *UpdateChangeRequestRequest, opts ...grpc.CallOption) (*gen.ChangeRequest, error)
	ListChangeRequestsForReview(ctx context.Context, in *ListChangeRequestsForReviewRequest, opts ...grpc.CallOption) (*ListChangeRequestsForReviewResponse, error)
	// user project version data
	GetUserProjectVersionData(ctx context.Context, in *GetUserProjectVersionDataRequest, opts ...grpc.CallOption) (*GetUserProjectVersionDataResponse, error)
	SaveUserProjectVersionData(ctx context.Context, in *SaveUserProjectVersionDataRequest, opts ...grpc.CallOption) (*SaveUserProjectVersionDataResponse, error)
	// object store secrets
	GetObjectStoreWithSecret(ctx context.Context, in *GetObjectStoreWithSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error)
	CreateObjectStoreSecret(ctx context.Context, in *CreateObjectStoreSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error)
	UpdateObjectStoreSecret(ctx context.Context, in *UpdateObjectStoreSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error)
	DeleteObjectStoreSecret(ctx context.Context, in *DeleteObjectStoreSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error)
	// data manager
	GenerateSQLForCR(ctx context.Context, in *GenerateSQLForCRRequest, opts ...grpc.CallOption) (*GenerateSQLForCRResponse, error)
	ReviewDataChange(ctx context.Context, in *ReviewDataChangeRequest, opts ...grpc.CallOption) (*ReviewDataChangeResponse, error)
	// membership
	GetMembership(ctx context.Context, in *GetMembershipRequest, opts ...grpc.CallOption) (*gen.Membership, error)
	CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*gen.Membership, error)
	UpdateMembership(ctx context.Context, in *UpdateMembershipRequest, opts ...grpc.CallOption) (*gen.Membership, error)
	MembershipForProject(ctx context.Context, in *MembershipForProjectRequest, opts ...grpc.CallOption) (*gen.Membership, error)
	MembershipForTeam(ctx context.Context, in *MembershipForTeamRequest, opts ...grpc.CallOption) (*gen.Membership, error)
}

type nuzurProductClient struct {
	cc grpc.ClientConnInterface
}

func NewNuzurProductClient(cc grpc.ClientConnInterface) NuzurProductClient {
	return &nuzurProductClient{cc}
}

func (c *nuzurProductClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*gen.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.User)
	err := c.cc.Invoke(ctx, NuzurProduct_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetTokenUser(ctx context.Context, in *GetTokenUserRequest, opts ...grpc.CallOption) (*gen.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.User)
	err := c.cc.Invoke(ctx, NuzurProduct_GetTokenUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*gen.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.User)
	err := c.cc.Invoke(ctx, NuzurProduct_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetTokenUserRoleForProject(ctx context.Context, in *GetUserRoleForProjectRequest, opts ...grpc.CallOption) (*GetUserRoleForProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRoleForProjectResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetTokenUserRoleForProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetTokenUserRoleForTeam(ctx context.Context, in *GetUserRoleForTeamRequest, opts ...grpc.CallOption) (*GetUserRoleForTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRoleForTeamResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetTokenUserRoleForTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListUsersForTeam(ctx context.Context, in *ListUsersForTeamRequest, opts ...grpc.CallOption) (*ListUsersForTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersForTeamResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListUsersForTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListUsersForProject(ctx context.Context, in *ListUsersForProjectRequest, opts ...grpc.CallOption) (*ListUsersForProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersForProjectResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListUsersForProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*gen.UserProject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.UserProject)
	err := c.cc.Invoke(ctx, NuzurProduct_AddUserToProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateUserProject(ctx context.Context, in *UpdateUserProjectRequest, opts ...grpc.CallOption) (*gen.UserProject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.UserProject)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateUserProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) RemoveUserFromProject(ctx context.Context, in *RemoveUserFromProjectRequest, opts ...grpc.CallOption) (*gen.UserProject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.UserProject)
	err := c.cc.Invoke(ctx, NuzurProduct_RemoveUserFromProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*gen.UserTeam, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.UserTeam)
	err := c.cc.Invoke(ctx, NuzurProduct_AddUserToTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateUserTeam(ctx context.Context, in *UpdateUserTeamRequest, opts ...grpc.CallOption) (*gen.UserTeam, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.UserTeam)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateUserTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) RemoveUserFromTeam(ctx context.Context, in *RemoveUserFromTeamRequest, opts ...grpc.CallOption) (*gen.UserTeam, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.UserTeam)
	err := c.cc.Invoke(ctx, NuzurProduct_RemoveUserFromTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListTeamsForUser(ctx context.Context, in *ListTeamsForUserRequest, opts ...grpc.CallOption) (*ListTeamsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTeamsForUserResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListTeamsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListTeamsForAdminUser(ctx context.Context, in *ListTeamsForAdminUserRequest, opts ...grpc.CallOption) (*ListTeamsForAdminUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTeamsForAdminUserResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListTeamsForAdminUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetTeamForUser(ctx context.Context, in *GetTeamForUserRequest, opts ...grpc.CallOption) (*gen.Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Team)
	err := c.cc.Invoke(ctx, NuzurProduct_GetTeamForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*gen.Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Team)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*gen.Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Team)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetConnectionWithSecret(ctx context.Context, in *GetConnectionWithSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Connection)
	err := c.cc.Invoke(ctx, NuzurProduct_GetConnectionWithSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateConnectionSecret(ctx context.Context, in *CreateConnectionSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Connection)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateConnectionSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateConnectionSecret(ctx context.Context, in *UpdateConnectionSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Connection)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateConnectionSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) DeleteConnectionSecret(ctx context.Context, in *DeleteConnectionSecretRequest, opts ...grpc.CallOption) (*gen.Connection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Connection)
	err := c.cc.Invoke(ctx, NuzurProduct_DeleteConnectionSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListProjectsForUser(ctx context.Context, in *ListProjectsForUserRequest, opts ...grpc.CallOption) (*ListProjectsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsForUserResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListProjectsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetProjectForUser(ctx context.Context, in *GetProjectForUserRequest, opts ...grpc.CallOption) (*gen.Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Project)
	err := c.cc.Invoke(ctx, NuzurProduct_GetProjectForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*gen.Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Project)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*gen.Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Project)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListProjectVersions(ctx context.Context, in *ListProjectVersionsRequest, opts ...grpc.CallOption) (*ListProjectVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectVersionsResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListProjectVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListProjectVersionsForUser(ctx context.Context, in *ListProjectVersionsForUserRequest, opts ...grpc.CallOption) (*ListProjectVersionsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectVersionsForUserResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListProjectVersionsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetProjectVersionForUser(ctx context.Context, in *GetProjectVersionForUserRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_GetProjectVersionForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetLatestProjectVersion(ctx context.Context, in *GetLatestProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_GetLatestProjectVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetLatestProjectVersionForUser(ctx context.Context, in *GetLatestProjectVersionForUserRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_GetLatestProjectVersionForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetLatestProjectVersionUUIDForUser(ctx context.Context, in *GetLatestProjectVersionUUIDForUserRequest, opts ...grpc.CallOption) (*GetLatestProjectVersionUUIDForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestProjectVersionUUIDForUserResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetLatestProjectVersionUUIDForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetProjectVersionVersion(ctx context.Context, in *GetProjectVersionVersionRequest, opts ...grpc.CallOption) (*GetProjectVersionVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectVersionVersionResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetProjectVersionVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetProjectVersionIdentifier(ctx context.Context, in *GetProjectVersionIdentifierRequest, opts ...grpc.CallOption) (*GetProjectVersionIdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectVersionIdentifierResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetProjectVersionIdentifier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateProjectVersion(ctx context.Context, in *CreateProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateProjectVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateDraftProjectVersionForExistingProject(ctx context.Context, in *CreateDraftProjectVersionForExistingProjectRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateDraftProjectVersionForExistingProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateProjectVersion(ctx context.Context, in *UpdateProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateProjectVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) DiscardDraftProjectVersion(ctx context.Context, in *DiscardDraftProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_DiscardDraftProjectVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) SendProjectVersionForReview(ctx context.Context, in *SendProjectVersionForReviewRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_SendProjectVersionForReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) WithdrawFromReviewProjectVersion(ctx context.Context, in *WithdrawFromReviewProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_WithdrawFromReviewProjectVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ReviewProjectVersion(ctx context.Context, in *ReviewProjectVersionRequest, opts ...grpc.CallOption) (*gen.ProjectVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ProjectVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_ReviewProjectVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UploadProjectVersionSnapshot(ctx context.Context, in *UploadProjectVersionSnapshotRequest, opts ...grpc.CallOption) (*UploadProjectVersionSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadProjectVersionSnapshotResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_UploadProjectVersionSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetSignedFileURL(ctx context.Context, in *GetSignedFileURLRequest, opts ...grpc.CallOption) (*GetSignedFileURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSignedFileURLResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetSignedFileURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UploadExtensionExecutionFile(ctx context.Context, in *UploadExtensionExecutionFileRequest, opts ...grpc.CallOption) (*UploadExtensionExecutionFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadExtensionExecutionFileResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_UploadExtensionExecutionFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetExtensionExecutionFile(ctx context.Context, in *GetExtensionExecutionFileRequest, opts ...grpc.CallOption) (*GetExtensionExecutionFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExtensionExecutionFileResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetExtensionExecutionFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UploadExtensionIcon(ctx context.Context, in *UploadExtensionIconRequest, opts ...grpc.CallOption) (*UploadExtensionIconResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadExtensionIconResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_UploadExtensionIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UploadRecordFieldFile(ctx context.Context, in *UploadRecordFieldFileRequest, opts ...grpc.CallOption) (*UploadRecordFieldFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadRecordFieldFileResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_UploadRecordFieldFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetRecordFieldSignedFileURL(ctx context.Context, in *GetRecordFieldSignedFileURLRequest, opts ...grpc.CallOption) (*GetRecordFieldSignedFileURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordFieldSignedFileURLResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetRecordFieldSignedFileURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetRecordFileContent(ctx context.Context, in *GetRecordFileContentRequest, opts ...grpc.CallOption) (*GetRecordFileContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordFileContentResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetRecordFileContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListExtensions(ctx context.Context, in *ListExtensionsRequest, opts ...grpc.CallOption) (*ListExtensionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExtensionsResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*gen.Extension, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Extension)
	err := c.cc.Invoke(ctx, NuzurProduct_GetExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateExtension(ctx context.Context, in *CreateExtensionRequest, opts ...grpc.CallOption) (*gen.Extension, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Extension)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*gen.Extension, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Extension)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListExtensionVersions(ctx context.Context, in *ListExtensionVersionsRequest, opts ...grpc.CallOption) (*ListExtensionVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExtensionVersionsResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListExtensionVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetExtensionVersion(ctx context.Context, in *GetExtensionVersionRequest, opts ...grpc.CallOption) (*gen.ExtensionVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ExtensionVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_GetExtensionVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateExtensionVersion(ctx context.Context, in *CreateExtensionVersionRequest, opts ...grpc.CallOption) (*gen.ExtensionVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ExtensionVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateExtensionVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateExtensionVersion(ctx context.Context, in *UpdateExtensionVersionRequest, opts ...grpc.CallOption) (*gen.ExtensionVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ExtensionVersion)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateExtensionVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListExtensionExecutions(ctx context.Context, in *ListExtensionExecutionsRequest, opts ...grpc.CallOption) (*ListExtensionExecutionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExtensionExecutionsResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListExtensionExecutions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetExtensionExecution(ctx context.Context, in *GetExtensionExecutionRequest, opts ...grpc.CallOption) (*gen.ExtensionExecution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ExtensionExecution)
	err := c.cc.Invoke(ctx, NuzurProduct_GetExtensionExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateExtensionExecution(ctx context.Context, in *CreateExtensionExecutionRequest, opts ...grpc.CallOption) (*gen.ExtensionExecution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ExtensionExecution)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateExtensionExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateExtensionExecution(ctx context.Context, in *UpdateExtensionExecutionRequest, opts ...grpc.CallOption) (*gen.ExtensionExecution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ExtensionExecution)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateExtensionExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListUserChangeRequests(ctx context.Context, in *ListUserChangeRequestsRequest, opts ...grpc.CallOption) (*ListUserChangeRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserChangeRequestsResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListUserChangeRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetChangeRequest(ctx context.Context, in *GetChangeRequestRequest, opts ...grpc.CallOption) (*gen.ChangeRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ChangeRequest)
	err := c.cc.Invoke(ctx, NuzurProduct_GetChangeRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateChangeRequest(ctx context.Context, in *CreateChangeRequestRequest, opts ...grpc.CallOption) (*gen.ChangeRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ChangeRequest)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateChangeRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateChangeRequest(ctx context.Context, in *UpdateChangeRequestRequest, opts ...grpc.CallOption) (*gen.ChangeRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ChangeRequest)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateChangeRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ListChangeRequestsForReview(ctx context.Context, in *ListChangeRequestsForReviewRequest, opts ...grpc.CallOption) (*ListChangeRequestsForReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChangeRequestsForReviewResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ListChangeRequestsForReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetUserProjectVersionData(ctx context.Context, in *GetUserProjectVersionDataRequest, opts ...grpc.CallOption) (*GetUserProjectVersionDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProjectVersionDataResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GetUserProjectVersionData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) SaveUserProjectVersionData(ctx context.Context, in *SaveUserProjectVersionDataRequest, opts ...grpc.CallOption) (*SaveUserProjectVersionDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveUserProjectVersionDataResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_SaveUserProjectVersionData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetObjectStoreWithSecret(ctx context.Context, in *GetObjectStoreWithSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ObjectStore)
	err := c.cc.Invoke(ctx, NuzurProduct_GetObjectStoreWithSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateObjectStoreSecret(ctx context.Context, in *CreateObjectStoreSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ObjectStore)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateObjectStoreSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateObjectStoreSecret(ctx context.Context, in *UpdateObjectStoreSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ObjectStore)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateObjectStoreSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) DeleteObjectStoreSecret(ctx context.Context, in *DeleteObjectStoreSecretRequest, opts ...grpc.CallOption) (*gen.ObjectStore, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.ObjectStore)
	err := c.cc.Invoke(ctx, NuzurProduct_DeleteObjectStoreSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GenerateSQLForCR(ctx context.Context, in *GenerateSQLForCRRequest, opts ...grpc.CallOption) (*GenerateSQLForCRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSQLForCRResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_GenerateSQLForCR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) ReviewDataChange(ctx context.Context, in *ReviewDataChangeRequest, opts ...grpc.CallOption) (*ReviewDataChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewDataChangeResponse)
	err := c.cc.Invoke(ctx, NuzurProduct_ReviewDataChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) GetMembership(ctx context.Context, in *GetMembershipRequest, opts ...grpc.CallOption) (*gen.Membership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Membership)
	err := c.cc.Invoke(ctx, NuzurProduct_GetMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*gen.Membership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Membership)
	err := c.cc.Invoke(ctx, NuzurProduct_CreateMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) UpdateMembership(ctx context.Context, in *UpdateMembershipRequest, opts ...grpc.CallOption) (*gen.Membership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Membership)
	err := c.cc.Invoke(ctx, NuzurProduct_UpdateMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) MembershipForProject(ctx context.Context, in *MembershipForProjectRequest, opts ...grpc.CallOption) (*gen.Membership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Membership)
	err := c.cc.Invoke(ctx, NuzurProduct_MembershipForProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurProductClient) MembershipForTeam(ctx context.Context, in *MembershipForTeamRequest, opts ...grpc.CallOption) (*gen.Membership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gen.Membership)
	err := c.cc.Invoke(ctx, NuzurProduct_MembershipForTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NuzurProductServer is the server API for NuzurProduct service.
// All implementations must embed UnimplementedNuzurProductServer
// for forward compatibility.
type NuzurProductServer interface {
	// user
	GetUser(context.Context, *GetUserRequest) (*gen.User, error)
	GetTokenUser(context.Context, *GetTokenUserRequest) (*gen.User, error)
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*gen.User, error)
	GetTokenUserRoleForProject(context.Context, *GetUserRoleForProjectRequest) (*GetUserRoleForProjectResponse, error)
	GetTokenUserRoleForTeam(context.Context, *GetUserRoleForTeamRequest) (*GetUserRoleForTeamResponse, error)
	// user relations
	ListUsersForTeam(context.Context, *ListUsersForTeamRequest) (*ListUsersForTeamResponse, error)
	ListUsersForProject(context.Context, *ListUsersForProjectRequest) (*ListUsersForProjectResponse, error)
	AddUserToProject(context.Context, *AddUserToProjectRequest) (*gen.UserProject, error)
	UpdateUserProject(context.Context, *UpdateUserProjectRequest) (*gen.UserProject, error)
	RemoveUserFromProject(context.Context, *RemoveUserFromProjectRequest) (*gen.UserProject, error)
	AddUserToTeam(context.Context, *AddUserToTeamRequest) (*gen.UserTeam, error)
	UpdateUserTeam(context.Context, *UpdateUserTeamRequest) (*gen.UserTeam, error)
	RemoveUserFromTeam(context.Context, *RemoveUserFromTeamRequest) (*gen.UserTeam, error)
	// team
	ListTeamsForUser(context.Context, *ListTeamsForUserRequest) (*ListTeamsForUserResponse, error)
	ListTeamsForAdminUser(context.Context, *ListTeamsForAdminUserRequest) (*ListTeamsForAdminUserResponse, error)
	GetTeamForUser(context.Context, *GetTeamForUserRequest) (*gen.Team, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*gen.Team, error)
	UpdateTeam(context.Context, *UpdateTeamRequest) (*gen.Team, error)
	// connection
	GetConnectionWithSecret(context.Context, *GetConnectionWithSecretRequest) (*gen.Connection, error)
	CreateConnectionSecret(context.Context, *CreateConnectionSecretRequest) (*gen.Connection, error)
	UpdateConnectionSecret(context.Context, *UpdateConnectionSecretRequest) (*gen.Connection, error)
	DeleteConnectionSecret(context.Context, *DeleteConnectionSecretRequest) (*gen.Connection, error)
	// project
	ListProjectsForUser(context.Context, *ListProjectsForUserRequest) (*ListProjectsForUserResponse, error)
	GetProjectForUser(context.Context, *GetProjectForUserRequest) (*gen.Project, error)
	CreateProject(context.Context, *CreateProjectRequest) (*gen.Project, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*gen.Project, error)
	// project version
	ListProjectVersions(context.Context, *ListProjectVersionsRequest) (*ListProjectVersionsResponse, error)
	ListProjectVersionsForUser(context.Context, *ListProjectVersionsForUserRequest) (*ListProjectVersionsForUserResponse, error)
	GetProjectVersionForUser(context.Context, *GetProjectVersionForUserRequest) (*gen.ProjectVersion, error)
	GetLatestProjectVersion(context.Context, *GetLatestProjectVersionRequest) (*gen.ProjectVersion, error)
	GetLatestProjectVersionForUser(context.Context, *GetLatestProjectVersionForUserRequest) (*gen.ProjectVersion, error)
	GetLatestProjectVersionUUIDForUser(context.Context, *GetLatestProjectVersionUUIDForUserRequest) (*GetLatestProjectVersionUUIDForUserResponse, error)
	GetProjectVersionVersion(context.Context, *GetProjectVersionVersionRequest) (*GetProjectVersionVersionResponse, error)
	GetProjectVersionIdentifier(context.Context, *GetProjectVersionIdentifierRequest) (*GetProjectVersionIdentifierResponse, error)
	CreateProjectVersion(context.Context, *CreateProjectVersionRequest) (*gen.ProjectVersion, error)
	CreateDraftProjectVersionForExistingProject(context.Context, *CreateDraftProjectVersionForExistingProjectRequest) (*gen.ProjectVersion, error)
	UpdateProjectVersion(context.Context, *UpdateProjectVersionRequest) (*gen.ProjectVersion, error)
	DiscardDraftProjectVersion(context.Context, *DiscardDraftProjectVersionRequest) (*gen.ProjectVersion, error)
	SendProjectVersionForReview(context.Context, *SendProjectVersionForReviewRequest) (*gen.ProjectVersion, error)
	WithdrawFromReviewProjectVersion(context.Context, *WithdrawFromReviewProjectVersionRequest) (*gen.ProjectVersion, error)
	ReviewProjectVersion(context.Context, *ReviewProjectVersionRequest) (*gen.ProjectVersion, error)
	// files
	UploadProjectVersionSnapshot(context.Context, *UploadProjectVersionSnapshotRequest) (*UploadProjectVersionSnapshotResponse, error)
	GetSignedFileURL(context.Context, *GetSignedFileURLRequest) (*GetSignedFileURLResponse, error)
	UploadExtensionExecutionFile(context.Context, *UploadExtensionExecutionFileRequest) (*UploadExtensionExecutionFileResponse, error)
	GetExtensionExecutionFile(context.Context, *GetExtensionExecutionFileRequest) (*GetExtensionExecutionFileResponse, error)
	UploadExtensionIcon(context.Context, *UploadExtensionIconRequest) (*UploadExtensionIconResponse, error)
	// data manager - records
	UploadRecordFieldFile(context.Context, *UploadRecordFieldFileRequest) (*UploadRecordFieldFileResponse, error)
	GetRecordFieldSignedFileURL(context.Context, *GetRecordFieldSignedFileURLRequest) (*GetRecordFieldSignedFileURLResponse, error)
	GetRecordFileContent(context.Context, *GetRecordFileContentRequest) (*GetRecordFileContentResponse, error)
	// extensions
	ListExtensions(context.Context, *ListExtensionsRequest) (*ListExtensionsResponse, error)
	GetExtension(context.Context, *GetExtensionRequest) (*gen.Extension, error)
	CreateExtension(context.Context, *CreateExtensionRequest) (*gen.Extension, error)
	UpdateExtension(context.Context, *UpdateExtensionRequest) (*gen.Extension, error)
	// extension version
	ListExtensionVersions(context.Context, *ListExtensionVersionsRequest) (*ListExtensionVersionsResponse, error)
	GetExtensionVersion(context.Context, *GetExtensionVersionRequest) (*gen.ExtensionVersion, error)
	CreateExtensionVersion(context.Context, *CreateExtensionVersionRequest) (*gen.ExtensionVersion, error)
	UpdateExtensionVersion(context.Context, *UpdateExtensionVersionRequest) (*gen.ExtensionVersion, error)
	// extension exec
	ListExtensionExecutions(context.Context, *ListExtensionExecutionsRequest) (*ListExtensionExecutionsResponse, error)
	GetExtensionExecution(context.Context, *GetExtensionExecutionRequest) (*gen.ExtensionExecution, error)
	CreateExtensionExecution(context.Context, *CreateExtensionExecutionRequest) (*gen.ExtensionExecution, error)
	UpdateExtensionExecution(context.Context, *UpdateExtensionExecutionRequest) (*gen.ExtensionExecution, error)
	// change request
	ListUserChangeRequests(context.Context, *ListUserChangeRequestsRequest) (*ListUserChangeRequestsResponse, error)
	GetChangeRequest(context.Context, *GetChangeRequestRequest) (*gen.ChangeRequest, error)
	CreateChangeRequest(context.Context, *CreateChangeRequestRequest) (*gen.ChangeRequest, error)
	UpdateChangeRequest(context.Context, *UpdateChangeRequestRequest) (*gen.ChangeRequest, error)
	ListChangeRequestsForReview(context.Context, *ListChangeRequestsForReviewRequest) (*ListChangeRequestsForReviewResponse, error)
	// user project version data
	GetUserProjectVersionData(context.Context, *GetUserProjectVersionDataRequest) (*GetUserProjectVersionDataResponse, error)
	SaveUserProjectVersionData(context.Context, *SaveUserProjectVersionDataRequest) (*SaveUserProjectVersionDataResponse, error)
	// object store secrets
	GetObjectStoreWithSecret(context.Context, *GetObjectStoreWithSecretRequest) (*gen.ObjectStore, error)
	CreateObjectStoreSecret(context.Context, *CreateObjectStoreSecretRequest) (*gen.ObjectStore, error)
	UpdateObjectStoreSecret(context.Context, *UpdateObjectStoreSecretRequest) (*gen.ObjectStore, error)
	DeleteObjectStoreSecret(context.Context, *DeleteObjectStoreSecretRequest) (*gen.ObjectStore, error)
	// data manager
	GenerateSQLForCR(context.Context, *GenerateSQLForCRRequest) (*GenerateSQLForCRResponse, error)
	ReviewDataChange(context.Context, *ReviewDataChangeRequest) (*ReviewDataChangeResponse, error)
	// membership
	GetMembership(context.Context, *GetMembershipRequest) (*gen.Membership, error)
	CreateMembership(context.Context, *CreateMembershipRequest) (*gen.Membership, error)
	UpdateMembership(context.Context, *UpdateMembershipRequest) (*gen.Membership, error)
	MembershipForProject(context.Context, *MembershipForProjectRequest) (*gen.Membership, error)
	MembershipForTeam(context.Context, *MembershipForTeamRequest) (*gen.Membership, error)
	mustEmbedUnimplementedNuzurProductServer()
}

// UnimplementedNuzurProductServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNuzurProductServer struct{}

func (UnimplementedNuzurProductServer) GetUser(context.Context, *GetUserRequest) (*gen.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedNuzurProductServer) GetTokenUser(context.Context, *GetTokenUserRequest) (*gen.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenUser not implemented")
}
func (UnimplementedNuzurProductServer) GetUserByEmail(context.Context, *GetUserByEmailRequest) (*gen.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedNuzurProductServer) GetTokenUserRoleForProject(context.Context, *GetUserRoleForProjectRequest) (*GetUserRoleForProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenUserRoleForProject not implemented")
}
func (UnimplementedNuzurProductServer) GetTokenUserRoleForTeam(context.Context, *GetUserRoleForTeamRequest) (*GetUserRoleForTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenUserRoleForTeam not implemented")
}
func (UnimplementedNuzurProductServer) ListUsersForTeam(context.Context, *ListUsersForTeamRequest) (*ListUsersForTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersForTeam not implemented")
}
func (UnimplementedNuzurProductServer) ListUsersForProject(context.Context, *ListUsersForProjectRequest) (*ListUsersForProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersForProject not implemented")
}
func (UnimplementedNuzurProductServer) AddUserToProject(context.Context, *AddUserToProjectRequest) (*gen.UserProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToProject not implemented")
}
func (UnimplementedNuzurProductServer) UpdateUserProject(context.Context, *UpdateUserProjectRequest) (*gen.UserProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProject not implemented")
}
func (UnimplementedNuzurProductServer) RemoveUserFromProject(context.Context, *RemoveUserFromProjectRequest) (*gen.UserProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromProject not implemented")
}
func (UnimplementedNuzurProductServer) AddUserToTeam(context.Context, *AddUserToTeamRequest) (*gen.UserTeam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToTeam not implemented")
}
func (UnimplementedNuzurProductServer) UpdateUserTeam(context.Context, *UpdateUserTeamRequest) (*gen.UserTeam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTeam not implemented")
}
func (UnimplementedNuzurProductServer) RemoveUserFromTeam(context.Context, *RemoveUserFromTeamRequest) (*gen.UserTeam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromTeam not implemented")
}
func (UnimplementedNuzurProductServer) ListTeamsForUser(context.Context, *ListTeamsForUserRequest) (*ListTeamsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamsForUser not implemented")
}
func (UnimplementedNuzurProductServer) ListTeamsForAdminUser(context.Context, *ListTeamsForAdminUserRequest) (*ListTeamsForAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamsForAdminUser not implemented")
}
func (UnimplementedNuzurProductServer) GetTeamForUser(context.Context, *GetTeamForUserRequest) (*gen.Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamForUser not implemented")
}
func (UnimplementedNuzurProductServer) CreateTeam(context.Context, *CreateTeamRequest) (*gen.Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedNuzurProductServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*gen.Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedNuzurProductServer) GetConnectionWithSecret(context.Context, *GetConnectionWithSecretRequest) (*gen.Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionWithSecret not implemented")
}
func (UnimplementedNuzurProductServer) CreateConnectionSecret(context.Context, *CreateConnectionSecretRequest) (*gen.Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectionSecret not implemented")
}
func (UnimplementedNuzurProductServer) UpdateConnectionSecret(context.Context, *UpdateConnectionSecretRequest) (*gen.Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionSecret not implemented")
}
func (UnimplementedNuzurProductServer) DeleteConnectionSecret(context.Context, *DeleteConnectionSecretRequest) (*gen.Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectionSecret not implemented")
}
func (UnimplementedNuzurProductServer) ListProjectsForUser(context.Context, *ListProjectsForUserRequest) (*ListProjectsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsForUser not implemented")
}
func (UnimplementedNuzurProductServer) GetProjectForUser(context.Context, *GetProjectForUserRequest) (*gen.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectForUser not implemented")
}
func (UnimplementedNuzurProductServer) CreateProject(context.Context, *CreateProjectRequest) (*gen.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedNuzurProductServer) UpdateProject(context.Context, *UpdateProjectRequest) (*gen.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedNuzurProductServer) ListProjectVersions(context.Context, *ListProjectVersionsRequest) (*ListProjectVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectVersions not implemented")
}
func (UnimplementedNuzurProductServer) ListProjectVersionsForUser(context.Context, *ListProjectVersionsForUserRequest) (*ListProjectVersionsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectVersionsForUser not implemented")
}
func (UnimplementedNuzurProductServer) GetProjectVersionForUser(context.Context, *GetProjectVersionForUserRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectVersionForUser not implemented")
}
func (UnimplementedNuzurProductServer) GetLatestProjectVersion(context.Context, *GetLatestProjectVersionRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestProjectVersion not implemented")
}
func (UnimplementedNuzurProductServer) GetLatestProjectVersionForUser(context.Context, *GetLatestProjectVersionForUserRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestProjectVersionForUser not implemented")
}
func (UnimplementedNuzurProductServer) GetLatestProjectVersionUUIDForUser(context.Context, *GetLatestProjectVersionUUIDForUserRequest) (*GetLatestProjectVersionUUIDForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestProjectVersionUUIDForUser not implemented")
}
func (UnimplementedNuzurProductServer) GetProjectVersionVersion(context.Context, *GetProjectVersionVersionRequest) (*GetProjectVersionVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectVersionVersion not implemented")
}
func (UnimplementedNuzurProductServer) GetProjectVersionIdentifier(context.Context, *GetProjectVersionIdentifierRequest) (*GetProjectVersionIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectVersionIdentifier not implemented")
}
func (UnimplementedNuzurProductServer) CreateProjectVersion(context.Context, *CreateProjectVersionRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectVersion not implemented")
}
func (UnimplementedNuzurProductServer) CreateDraftProjectVersionForExistingProject(context.Context, *CreateDraftProjectVersionForExistingProjectRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraftProjectVersionForExistingProject not implemented")
}
func (UnimplementedNuzurProductServer) UpdateProjectVersion(context.Context, *UpdateProjectVersionRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectVersion not implemented")
}
func (UnimplementedNuzurProductServer) DiscardDraftProjectVersion(context.Context, *DiscardDraftProjectVersionRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardDraftProjectVersion not implemented")
}
func (UnimplementedNuzurProductServer) SendProjectVersionForReview(context.Context, *SendProjectVersionForReviewRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProjectVersionForReview not implemented")
}
func (UnimplementedNuzurProductServer) WithdrawFromReviewProjectVersion(context.Context, *WithdrawFromReviewProjectVersionRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFromReviewProjectVersion not implemented")
}
func (UnimplementedNuzurProductServer) ReviewProjectVersion(context.Context, *ReviewProjectVersionRequest) (*gen.ProjectVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewProjectVersion not implemented")
}
func (UnimplementedNuzurProductServer) UploadProjectVersionSnapshot(context.Context, *UploadProjectVersionSnapshotRequest) (*UploadProjectVersionSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProjectVersionSnapshot not implemented")
}
func (UnimplementedNuzurProductServer) GetSignedFileURL(context.Context, *GetSignedFileURLRequest) (*GetSignedFileURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedFileURL not implemented")
}
func (UnimplementedNuzurProductServer) UploadExtensionExecutionFile(context.Context, *UploadExtensionExecutionFileRequest) (*UploadExtensionExecutionFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadExtensionExecutionFile not implemented")
}
func (UnimplementedNuzurProductServer) GetExtensionExecutionFile(context.Context, *GetExtensionExecutionFileRequest) (*GetExtensionExecutionFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtensionExecutionFile not implemented")
}
func (UnimplementedNuzurProductServer) UploadExtensionIcon(context.Context, *UploadExtensionIconRequest) (*UploadExtensionIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadExtensionIcon not implemented")
}
func (UnimplementedNuzurProductServer) UploadRecordFieldFile(context.Context, *UploadRecordFieldFileRequest) (*UploadRecordFieldFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRecordFieldFile not implemented")
}
func (UnimplementedNuzurProductServer) GetRecordFieldSignedFileURL(context.Context, *GetRecordFieldSignedFileURLRequest) (*GetRecordFieldSignedFileURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordFieldSignedFileURL not implemented")
}
func (UnimplementedNuzurProductServer) GetRecordFileContent(context.Context, *GetRecordFileContentRequest) (*GetRecordFileContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordFileContent not implemented")
}
func (UnimplementedNuzurProductServer) ListExtensions(context.Context, *ListExtensionsRequest) (*ListExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtensions not implemented")
}
func (UnimplementedNuzurProductServer) GetExtension(context.Context, *GetExtensionRequest) (*gen.Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtension not implemented")
}
func (UnimplementedNuzurProductServer) CreateExtension(context.Context, *CreateExtensionRequest) (*gen.Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtension not implemented")
}
func (UnimplementedNuzurProductServer) UpdateExtension(context.Context, *UpdateExtensionRequest) (*gen.Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (UnimplementedNuzurProductServer) ListExtensionVersions(context.Context, *ListExtensionVersionsRequest) (*ListExtensionVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtensionVersions not implemented")
}
func (UnimplementedNuzurProductServer) GetExtensionVersion(context.Context, *GetExtensionVersionRequest) (*gen.ExtensionVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtensionVersion not implemented")
}
func (UnimplementedNuzurProductServer) CreateExtensionVersion(context.Context, *CreateExtensionVersionRequest) (*gen.ExtensionVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtensionVersion not implemented")
}
func (UnimplementedNuzurProductServer) UpdateExtensionVersion(context.Context, *UpdateExtensionVersionRequest) (*gen.ExtensionVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtensionVersion not implemented")
}
func (UnimplementedNuzurProductServer) ListExtensionExecutions(context.Context, *ListExtensionExecutionsRequest) (*ListExtensionExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtensionExecutions not implemented")
}
func (UnimplementedNuzurProductServer) GetExtensionExecution(context.Context, *GetExtensionExecutionRequest) (*gen.ExtensionExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtensionExecution not implemented")
}
func (UnimplementedNuzurProductServer) CreateExtensionExecution(context.Context, *CreateExtensionExecutionRequest) (*gen.ExtensionExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtensionExecution not implemented")
}
func (UnimplementedNuzurProductServer) UpdateExtensionExecution(context.Context, *UpdateExtensionExecutionRequest) (*gen.ExtensionExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtensionExecution not implemented")
}
func (UnimplementedNuzurProductServer) ListUserChangeRequests(context.Context, *ListUserChangeRequestsRequest) (*ListUserChangeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserChangeRequests not implemented")
}
func (UnimplementedNuzurProductServer) GetChangeRequest(context.Context, *GetChangeRequestRequest) (*gen.ChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangeRequest not implemented")
}
func (UnimplementedNuzurProductServer) CreateChangeRequest(context.Context, *CreateChangeRequestRequest) (*gen.ChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChangeRequest not implemented")
}
func (UnimplementedNuzurProductServer) UpdateChangeRequest(context.Context, *UpdateChangeRequestRequest) (*gen.ChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChangeRequest not implemented")
}
func (UnimplementedNuzurProductServer) ListChangeRequestsForReview(context.Context, *ListChangeRequestsForReviewRequest) (*ListChangeRequestsForReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChangeRequestsForReview not implemented")
}
func (UnimplementedNuzurProductServer) GetUserProjectVersionData(context.Context, *GetUserProjectVersionDataRequest) (*GetUserProjectVersionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProjectVersionData not implemented")
}
func (UnimplementedNuzurProductServer) SaveUserProjectVersionData(context.Context, *SaveUserProjectVersionDataRequest) (*SaveUserProjectVersionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserProjectVersionData not implemented")
}
func (UnimplementedNuzurProductServer) GetObjectStoreWithSecret(context.Context, *GetObjectStoreWithSecretRequest) (*gen.ObjectStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectStoreWithSecret not implemented")
}
func (UnimplementedNuzurProductServer) CreateObjectStoreSecret(context.Context, *CreateObjectStoreSecretRequest) (*gen.ObjectStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStoreSecret not implemented")
}
func (UnimplementedNuzurProductServer) UpdateObjectStoreSecret(context.Context, *UpdateObjectStoreSecretRequest) (*gen.ObjectStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectStoreSecret not implemented")
}
func (UnimplementedNuzurProductServer) DeleteObjectStoreSecret(context.Context, *DeleteObjectStoreSecretRequest) (*gen.ObjectStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectStoreSecret not implemented")
}
func (UnimplementedNuzurProductServer) GenerateSQLForCR(context.Context, *GenerateSQLForCRRequest) (*GenerateSQLForCRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSQLForCR not implemented")
}
func (UnimplementedNuzurProductServer) ReviewDataChange(context.Context, *ReviewDataChangeRequest) (*ReviewDataChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewDataChange not implemented")
}
func (UnimplementedNuzurProductServer) GetMembership(context.Context, *GetMembershipRequest) (*gen.Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembership not implemented")
}
func (UnimplementedNuzurProductServer) CreateMembership(context.Context, *CreateMembershipRequest) (*gen.Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}
func (UnimplementedNuzurProductServer) UpdateMembership(context.Context, *UpdateMembershipRequest) (*gen.Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembership not implemented")
}
func (UnimplementedNuzurProductServer) MembershipForProject(context.Context, *MembershipForProjectRequest) (*gen.Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembershipForProject not implemented")
}
func (UnimplementedNuzurProductServer) MembershipForTeam(context.Context, *MembershipForTeamRequest) (*gen.Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembershipForTeam not implemented")
}
func (UnimplementedNuzurProductServer) mustEmbedUnimplementedNuzurProductServer() {}
func (UnimplementedNuzurProductServer) testEmbeddedByValue()                      {}

// UnsafeNuzurProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NuzurProductServer will
// result in compilation errors.
type UnsafeNuzurProductServer interface {
	mustEmbedUnimplementedNuzurProductServer()
}

func RegisterNuzurProductServer(s grpc.ServiceRegistrar, srv NuzurProductServer) {
	// If the following call pancis, it indicates UnimplementedNuzurProductServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NuzurProduct_ServiceDesc, srv)
}

func _NuzurProduct_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetTokenUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetTokenUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetTokenUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetTokenUser(ctx, req.(*GetTokenUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetTokenUserRoleForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetTokenUserRoleForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetTokenUserRoleForProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetTokenUserRoleForProject(ctx, req.(*GetUserRoleForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetTokenUserRoleForTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleForTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetTokenUserRoleForTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetTokenUserRoleForTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetTokenUserRoleForTeam(ctx, req.(*GetUserRoleForTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListUsersForTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersForTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListUsersForTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListUsersForTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListUsersForTeam(ctx, req.(*ListUsersForTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListUsersForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListUsersForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListUsersForProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListUsersForProject(ctx, req.(*ListUsersForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_AddUserToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).AddUserToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_AddUserToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).AddUserToProject(ctx, req.(*AddUserToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateUserProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateUserProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateUserProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateUserProject(ctx, req.(*UpdateUserProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_RemoveUserFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).RemoveUserFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_RemoveUserFromProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).RemoveUserFromProject(ctx, req.(*RemoveUserFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_AddUserToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).AddUserToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_AddUserToTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).AddUserToTeam(ctx, req.(*AddUserToTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateUserTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateUserTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateUserTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateUserTeam(ctx, req.(*UpdateUserTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_RemoveUserFromTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).RemoveUserFromTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_RemoveUserFromTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).RemoveUserFromTeam(ctx, req.(*RemoveUserFromTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListTeamsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListTeamsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListTeamsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListTeamsForUser(ctx, req.(*ListTeamsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListTeamsForAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsForAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListTeamsForAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListTeamsForAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListTeamsForAdminUser(ctx, req.(*ListTeamsForAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetTeamForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetTeamForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetTeamForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetTeamForUser(ctx, req.(*GetTeamForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetConnectionWithSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionWithSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetConnectionWithSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetConnectionWithSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetConnectionWithSecret(ctx, req.(*GetConnectionWithSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateConnectionSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateConnectionSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateConnectionSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateConnectionSecret(ctx, req.(*CreateConnectionSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateConnectionSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateConnectionSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateConnectionSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateConnectionSecret(ctx, req.(*UpdateConnectionSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_DeleteConnectionSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).DeleteConnectionSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_DeleteConnectionSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).DeleteConnectionSecret(ctx, req.(*DeleteConnectionSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListProjectsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListProjectsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListProjectsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListProjectsForUser(ctx, req.(*ListProjectsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetProjectForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetProjectForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetProjectForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetProjectForUser(ctx, req.(*GetProjectForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListProjectVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListProjectVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListProjectVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListProjectVersions(ctx, req.(*ListProjectVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListProjectVersionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectVersionsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListProjectVersionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListProjectVersionsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListProjectVersionsForUser(ctx, req.(*ListProjectVersionsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetProjectVersionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectVersionForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetProjectVersionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetProjectVersionForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetProjectVersionForUser(ctx, req.(*GetProjectVersionForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetLatestProjectVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestProjectVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetLatestProjectVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetLatestProjectVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetLatestProjectVersion(ctx, req.(*GetLatestProjectVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetLatestProjectVersionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestProjectVersionForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetLatestProjectVersionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetLatestProjectVersionForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetLatestProjectVersionForUser(ctx, req.(*GetLatestProjectVersionForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetLatestProjectVersionUUIDForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestProjectVersionUUIDForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetLatestProjectVersionUUIDForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetLatestProjectVersionUUIDForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetLatestProjectVersionUUIDForUser(ctx, req.(*GetLatestProjectVersionUUIDForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetProjectVersionVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectVersionVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetProjectVersionVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetProjectVersionVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetProjectVersionVersion(ctx, req.(*GetProjectVersionVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetProjectVersionIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectVersionIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetProjectVersionIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetProjectVersionIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetProjectVersionIdentifier(ctx, req.(*GetProjectVersionIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateProjectVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateProjectVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateProjectVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateProjectVersion(ctx, req.(*CreateProjectVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateDraftProjectVersionForExistingProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftProjectVersionForExistingProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateDraftProjectVersionForExistingProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateDraftProjectVersionForExistingProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateDraftProjectVersionForExistingProject(ctx, req.(*CreateDraftProjectVersionForExistingProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateProjectVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateProjectVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateProjectVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateProjectVersion(ctx, req.(*UpdateProjectVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_DiscardDraftProjectVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardDraftProjectVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).DiscardDraftProjectVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_DiscardDraftProjectVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).DiscardDraftProjectVersion(ctx, req.(*DiscardDraftProjectVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_SendProjectVersionForReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProjectVersionForReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).SendProjectVersionForReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_SendProjectVersionForReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).SendProjectVersionForReview(ctx, req.(*SendProjectVersionForReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_WithdrawFromReviewProjectVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawFromReviewProjectVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).WithdrawFromReviewProjectVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_WithdrawFromReviewProjectVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).WithdrawFromReviewProjectVersion(ctx, req.(*WithdrawFromReviewProjectVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ReviewProjectVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewProjectVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ReviewProjectVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ReviewProjectVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ReviewProjectVersion(ctx, req.(*ReviewProjectVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UploadProjectVersionSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProjectVersionSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UploadProjectVersionSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UploadProjectVersionSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UploadProjectVersionSnapshot(ctx, req.(*UploadProjectVersionSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetSignedFileURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedFileURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetSignedFileURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetSignedFileURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetSignedFileURL(ctx, req.(*GetSignedFileURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UploadExtensionExecutionFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadExtensionExecutionFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UploadExtensionExecutionFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UploadExtensionExecutionFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UploadExtensionExecutionFile(ctx, req.(*UploadExtensionExecutionFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetExtensionExecutionFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionExecutionFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetExtensionExecutionFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetExtensionExecutionFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetExtensionExecutionFile(ctx, req.(*GetExtensionExecutionFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UploadExtensionIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadExtensionIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UploadExtensionIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UploadExtensionIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UploadExtensionIcon(ctx, req.(*UploadExtensionIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UploadRecordFieldFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordFieldFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UploadRecordFieldFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UploadRecordFieldFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UploadRecordFieldFile(ctx, req.(*UploadRecordFieldFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetRecordFieldSignedFileURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordFieldSignedFileURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetRecordFieldSignedFileURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetRecordFieldSignedFileURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetRecordFieldSignedFileURL(ctx, req.(*GetRecordFieldSignedFileURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetRecordFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetRecordFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetRecordFileContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetRecordFileContent(ctx, req.(*GetRecordFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListExtensions(ctx, req.(*ListExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetExtension(ctx, req.(*GetExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateExtension(ctx, req.(*CreateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateExtension(ctx, req.(*UpdateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListExtensionVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExtensionVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListExtensionVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListExtensionVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListExtensionVersions(ctx, req.(*ListExtensionVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetExtensionVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetExtensionVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetExtensionVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetExtensionVersion(ctx, req.(*GetExtensionVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateExtensionVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateExtensionVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateExtensionVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateExtensionVersion(ctx, req.(*CreateExtensionVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateExtensionVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateExtensionVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateExtensionVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateExtensionVersion(ctx, req.(*UpdateExtensionVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListExtensionExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExtensionExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListExtensionExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListExtensionExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListExtensionExecutions(ctx, req.(*ListExtensionExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetExtensionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetExtensionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetExtensionExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetExtensionExecution(ctx, req.(*GetExtensionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateExtensionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateExtensionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateExtensionExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateExtensionExecution(ctx, req.(*CreateExtensionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateExtensionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateExtensionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateExtensionExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateExtensionExecution(ctx, req.(*UpdateExtensionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListUserChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserChangeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListUserChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListUserChangeRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListUserChangeRequests(ctx, req.(*ListUserChangeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetChangeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetChangeRequest(ctx, req.(*GetChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateChangeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateChangeRequest(ctx, req.(*CreateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateChangeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateChangeRequest(ctx, req.(*UpdateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ListChangeRequestsForReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangeRequestsForReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ListChangeRequestsForReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ListChangeRequestsForReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ListChangeRequestsForReview(ctx, req.(*ListChangeRequestsForReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetUserProjectVersionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProjectVersionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetUserProjectVersionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetUserProjectVersionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetUserProjectVersionData(ctx, req.(*GetUserProjectVersionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_SaveUserProjectVersionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserProjectVersionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).SaveUserProjectVersionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_SaveUserProjectVersionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).SaveUserProjectVersionData(ctx, req.(*SaveUserProjectVersionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetObjectStoreWithSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectStoreWithSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetObjectStoreWithSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetObjectStoreWithSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetObjectStoreWithSecret(ctx, req.(*GetObjectStoreWithSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateObjectStoreSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectStoreSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateObjectStoreSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateObjectStoreSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateObjectStoreSecret(ctx, req.(*CreateObjectStoreSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateObjectStoreSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectStoreSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateObjectStoreSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateObjectStoreSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateObjectStoreSecret(ctx, req.(*UpdateObjectStoreSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_DeleteObjectStoreSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectStoreSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).DeleteObjectStoreSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_DeleteObjectStoreSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).DeleteObjectStoreSecret(ctx, req.(*DeleteObjectStoreSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GenerateSQLForCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSQLForCRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GenerateSQLForCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GenerateSQLForCR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GenerateSQLForCR(ctx, req.(*GenerateSQLForCRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_ReviewDataChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewDataChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).ReviewDataChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_ReviewDataChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).ReviewDataChange(ctx, req.(*ReviewDataChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_GetMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).GetMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_GetMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).GetMembership(ctx, req.(*GetMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_CreateMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).CreateMembership(ctx, req.(*CreateMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_UpdateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).UpdateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_UpdateMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).UpdateMembership(ctx, req.(*UpdateMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_MembershipForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).MembershipForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_MembershipForProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).MembershipForProject(ctx, req.(*MembershipForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurProduct_MembershipForTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipForTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurProductServer).MembershipForTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurProduct_MembershipForTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurProductServer).MembershipForTeam(ctx, req.(*MembershipForTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NuzurProduct_ServiceDesc is the grpc.ServiceDesc for NuzurProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NuzurProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NuzurProduct",
	HandlerType: (*NuzurProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _NuzurProduct_GetUser_Handler,
		},
		{
			MethodName: "GetTokenUser",
			Handler:    _NuzurProduct_GetTokenUser_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _NuzurProduct_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetTokenUserRoleForProject",
			Handler:    _NuzurProduct_GetTokenUserRoleForProject_Handler,
		},
		{
			MethodName: "GetTokenUserRoleForTeam",
			Handler:    _NuzurProduct_GetTokenUserRoleForTeam_Handler,
		},
		{
			MethodName: "ListUsersForTeam",
			Handler:    _NuzurProduct_ListUsersForTeam_Handler,
		},
		{
			MethodName: "ListUsersForProject",
			Handler:    _NuzurProduct_ListUsersForProject_Handler,
		},
		{
			MethodName: "AddUserToProject",
			Handler:    _NuzurProduct_AddUserToProject_Handler,
		},
		{
			MethodName: "UpdateUserProject",
			Handler:    _NuzurProduct_UpdateUserProject_Handler,
		},
		{
			MethodName: "RemoveUserFromProject",
			Handler:    _NuzurProduct_RemoveUserFromProject_Handler,
		},
		{
			MethodName: "AddUserToTeam",
			Handler:    _NuzurProduct_AddUserToTeam_Handler,
		},
		{
			MethodName: "UpdateUserTeam",
			Handler:    _NuzurProduct_UpdateUserTeam_Handler,
		},
		{
			MethodName: "RemoveUserFromTeam",
			Handler:    _NuzurProduct_RemoveUserFromTeam_Handler,
		},
		{
			MethodName: "ListTeamsForUser",
			Handler:    _NuzurProduct_ListTeamsForUser_Handler,
		},
		{
			MethodName: "ListTeamsForAdminUser",
			Handler:    _NuzurProduct_ListTeamsForAdminUser_Handler,
		},
		{
			MethodName: "GetTeamForUser",
			Handler:    _NuzurProduct_GetTeamForUser_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _NuzurProduct_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _NuzurProduct_UpdateTeam_Handler,
		},
		{
			MethodName: "GetConnectionWithSecret",
			Handler:    _NuzurProduct_GetConnectionWithSecret_Handler,
		},
		{
			MethodName: "CreateConnectionSecret",
			Handler:    _NuzurProduct_CreateConnectionSecret_Handler,
		},
		{
			MethodName: "UpdateConnectionSecret",
			Handler:    _NuzurProduct_UpdateConnectionSecret_Handler,
		},
		{
			MethodName: "DeleteConnectionSecret",
			Handler:    _NuzurProduct_DeleteConnectionSecret_Handler,
		},
		{
			MethodName: "ListProjectsForUser",
			Handler:    _NuzurProduct_ListProjectsForUser_Handler,
		},
		{
			MethodName: "GetProjectForUser",
			Handler:    _NuzurProduct_GetProjectForUser_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _NuzurProduct_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _NuzurProduct_UpdateProject_Handler,
		},
		{
			MethodName: "ListProjectVersions",
			Handler:    _NuzurProduct_ListProjectVersions_Handler,
		},
		{
			MethodName: "ListProjectVersionsForUser",
			Handler:    _NuzurProduct_ListProjectVersionsForUser_Handler,
		},
		{
			MethodName: "GetProjectVersionForUser",
			Handler:    _NuzurProduct_GetProjectVersionForUser_Handler,
		},
		{
			MethodName: "GetLatestProjectVersion",
			Handler:    _NuzurProduct_GetLatestProjectVersion_Handler,
		},
		{
			MethodName: "GetLatestProjectVersionForUser",
			Handler:    _NuzurProduct_GetLatestProjectVersionForUser_Handler,
		},
		{
			MethodName: "GetLatestProjectVersionUUIDForUser",
			Handler:    _NuzurProduct_GetLatestProjectVersionUUIDForUser_Handler,
		},
		{
			MethodName: "GetProjectVersionVersion",
			Handler:    _NuzurProduct_GetProjectVersionVersion_Handler,
		},
		{
			MethodName: "GetProjectVersionIdentifier",
			Handler:    _NuzurProduct_GetProjectVersionIdentifier_Handler,
		},
		{
			MethodName: "CreateProjectVersion",
			Handler:    _NuzurProduct_CreateProjectVersion_Handler,
		},
		{
			MethodName: "CreateDraftProjectVersionForExistingProject",
			Handler:    _NuzurProduct_CreateDraftProjectVersionForExistingProject_Handler,
		},
		{
			MethodName: "UpdateProjectVersion",
			Handler:    _NuzurProduct_UpdateProjectVersion_Handler,
		},
		{
			MethodName: "DiscardDraftProjectVersion",
			Handler:    _NuzurProduct_DiscardDraftProjectVersion_Handler,
		},
		{
			MethodName: "SendProjectVersionForReview",
			Handler:    _NuzurProduct_SendProjectVersionForReview_Handler,
		},
		{
			MethodName: "WithdrawFromReviewProjectVersion",
			Handler:    _NuzurProduct_WithdrawFromReviewProjectVersion_Handler,
		},
		{
			MethodName: "ReviewProjectVersion",
			Handler:    _NuzurProduct_ReviewProjectVersion_Handler,
		},
		{
			MethodName: "UploadProjectVersionSnapshot",
			Handler:    _NuzurProduct_UploadProjectVersionSnapshot_Handler,
		},
		{
			MethodName: "GetSignedFileURL",
			Handler:    _NuzurProduct_GetSignedFileURL_Handler,
		},
		{
			MethodName: "UploadExtensionExecutionFile",
			Handler:    _NuzurProduct_UploadExtensionExecutionFile_Handler,
		},
		{
			MethodName: "GetExtensionExecutionFile",
			Handler:    _NuzurProduct_GetExtensionExecutionFile_Handler,
		},
		{
			MethodName: "UploadExtensionIcon",
			Handler:    _NuzurProduct_UploadExtensionIcon_Handler,
		},
		{
			MethodName: "UploadRecordFieldFile",
			Handler:    _NuzurProduct_UploadRecordFieldFile_Handler,
		},
		{
			MethodName: "GetRecordFieldSignedFileURL",
			Handler:    _NuzurProduct_GetRecordFieldSignedFileURL_Handler,
		},
		{
			MethodName: "GetRecordFileContent",
			Handler:    _NuzurProduct_GetRecordFileContent_Handler,
		},
		{
			MethodName: "ListExtensions",
			Handler:    _NuzurProduct_ListExtensions_Handler,
		},
		{
			MethodName: "GetExtension",
			Handler:    _NuzurProduct_GetExtension_Handler,
		},
		{
			MethodName: "CreateExtension",
			Handler:    _NuzurProduct_CreateExtension_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _NuzurProduct_UpdateExtension_Handler,
		},
		{
			MethodName: "ListExtensionVersions",
			Handler:    _NuzurProduct_ListExtensionVersions_Handler,
		},
		{
			MethodName: "GetExtensionVersion",
			Handler:    _NuzurProduct_GetExtensionVersion_Handler,
		},
		{
			MethodName: "CreateExtensionVersion",
			Handler:    _NuzurProduct_CreateExtensionVersion_Handler,
		},
		{
			MethodName: "UpdateExtensionVersion",
			Handler:    _NuzurProduct_UpdateExtensionVersion_Handler,
		},
		{
			MethodName: "ListExtensionExecutions",
			Handler:    _NuzurProduct_ListExtensionExecutions_Handler,
		},
		{
			MethodName: "GetExtensionExecution",
			Handler:    _NuzurProduct_GetExtensionExecution_Handler,
		},
		{
			MethodName: "CreateExtensionExecution",
			Handler:    _NuzurProduct_CreateExtensionExecution_Handler,
		},
		{
			MethodName: "UpdateExtensionExecution",
			Handler:    _NuzurProduct_UpdateExtensionExecution_Handler,
		},
		{
			MethodName: "ListUserChangeRequests",
			Handler:    _NuzurProduct_ListUserChangeRequests_Handler,
		},
		{
			MethodName: "GetChangeRequest",
			Handler:    _NuzurProduct_GetChangeRequest_Handler,
		},
		{
			MethodName: "CreateChangeRequest",
			Handler:    _NuzurProduct_CreateChangeRequest_Handler,
		},
		{
			MethodName: "UpdateChangeRequest",
			Handler:    _NuzurProduct_UpdateChangeRequest_Handler,
		},
		{
			MethodName: "ListChangeRequestsForReview",
			Handler:    _NuzurProduct_ListChangeRequestsForReview_Handler,
		},
		{
			MethodName: "GetUserProjectVersionData",
			Handler:    _NuzurProduct_GetUserProjectVersionData_Handler,
		},
		{
			MethodName: "SaveUserProjectVersionData",
			Handler:    _NuzurProduct_SaveUserProjectVersionData_Handler,
		},
		{
			MethodName: "GetObjectStoreWithSecret",
			Handler:    _NuzurProduct_GetObjectStoreWithSecret_Handler,
		},
		{
			MethodName: "CreateObjectStoreSecret",
			Handler:    _NuzurProduct_CreateObjectStoreSecret_Handler,
		},
		{
			MethodName: "UpdateObjectStoreSecret",
			Handler:    _NuzurProduct_UpdateObjectStoreSecret_Handler,
		},
		{
			MethodName: "DeleteObjectStoreSecret",
			Handler:    _NuzurProduct_DeleteObjectStoreSecret_Handler,
		},
		{
			MethodName: "GenerateSQLForCR",
			Handler:    _NuzurProduct_GenerateSQLForCR_Handler,
		},
		{
			MethodName: "ReviewDataChange",
			Handler:    _NuzurProduct_ReviewDataChange_Handler,
		},
		{
			MethodName: "GetMembership",
			Handler:    _NuzurProduct_GetMembership_Handler,
		},
		{
			MethodName: "CreateMembership",
			Handler:    _NuzurProduct_CreateMembership_Handler,
		},
		{
			MethodName: "UpdateMembership",
			Handler:    _NuzurProduct_UpdateMembership_Handler,
		},
		{
			MethodName: "MembershipForProject",
			Handler:    _NuzurProduct_MembershipForProject_Handler,
		},
		{
			MethodName: "MembershipForTeam",
			Handler:    _NuzurProduct_MembershipForTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
